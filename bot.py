#!/usr/bin/env python3 v2.0
import os
import logging
import requests
from datetime import datetime, timedelta
import pytz
import pyotp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters
)

# Configurations
TOKEN = "8119053401:AAHuqgTkiq6M8rT9VSHYEnIl96BHt9lXIZM"
GROUP_ID = -1002329495586
ADMIN_ID = 764559466
BOT_ID = 792534650
TOTP_SECRET = "ZV3YUXYVPOZSUOT43SKVDGFFVWBZXOVI"

# Global variables
allowed_users = {ADMIN_ID: {'limit': 5, 'used': 0, 'name': 'Admin'}}
user_language = {}
last_code_sent_time = None
pending_actions = {}

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Timezone setup
gaza_tz = pytz.timezone('Asia/Gaza')

# Language texts
texts = {
    'en': {
        'code_message': 'üîê *2FA Verification Code*\n\nNext code at: {next_time}',
        'copy_button': 'üìã Copy Code',
        'language_button': 'üåê Change Language',
        'copy_success': '‚úÖ Code sent to your private chat! Valid for 30 seconds.',
        'copy_limit_reached': '‚ùå Daily copy limit reached ({used}/{limit}). Try again tomorrow.',
        'not_allowed': '‚ùå You are not allowed to copy codes.',
        'admin_menu': 'üõ† *Admin Menu*',
        'add_user': '‚ûï Add User',
        'remove_user': '‚ûñ Remove User',
        'set_limit': 'üìù Set User Limit',
        'list_users': 'üë• List All Users',
        'user_added': '‚úÖ User {user_id} added successfully with default 5 copies/day.',
        'user_removed': '‚úÖ User {user_id} removed successfully.',
        'user_not_found': '‚ùå User {user_id} not found.',
        'limit_updated': '‚úÖ Daily limit updated to {limit} for user {user_name} (ID: {user_id}).',
        'invalid_input': '‚ùå Invalid input. Please send a valid number.',
        'user_info': 'üë§ *User Info*\n\nüîπ Name: {user_name}\nüîπ ID: `{user_id}`\nüîπ IP: `{ip}`\nüîπ Time: `{time}`\nüîπ Code: `{code}`',
        'current_limit': 'üî¢ *Set User Limit*\n\nUser: {user_name} (ID: {user_id})\nCurrent limit: {limit}\n\nSelect action:',
        'increase': '‚ûï Increase',
        'decrease': '‚ûñ Decrease',
        'send_user_id': 'Please send the user ID:',
        'code_private_msg': 'üîê *2FA Code*\n\nYour verification code: `{code}`\n\n‚ö†Ô∏è Valid for 30 seconds only!',
        'limit_change_success': '‚úÖ Limit changed successfully! New limit: {limit}'
    },
    'ar': {
        'code_message': 'üîê *ÿ±ŸÖÿ≤ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿßŸÑÿ´ŸÜÿßÿ¶Ÿäÿ©*\n\nÿßŸÑÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿßŸÑŸä ŸÅŸä: {next_time}',
        'copy_button': 'üìã ŸÜÿ≥ÿÆ ÿßŸÑÿ±ŸÖÿ≤',
        'language_button': 'üåê ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ©',
        'copy_success': '‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ŸÖÿ≤ ÿ•ŸÑŸâ ŸÖÿ≠ÿßÿØÿ´ÿ™ŸÉ ÿßŸÑÿÆÿßÿµÿ©! ÿµÿßŸÑÿ≠ ŸÑŸÖÿØÿ© 30 ÿ´ÿßŸÜŸäÿ©.',
        'copy_limit_reached': '‚ùå ÿ™ŸÖ ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ≠ÿØ ÿßŸÑŸäŸàŸÖŸä ŸÑŸÑŸÜÿ≥ÿÆ ({used}/{limit}). ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ÿ∫ÿØÿßŸã.',
        'not_allowed': '‚ùå ÿ∫Ÿäÿ± ŸÖÿ≥ŸÖŸàÿ≠ ŸÑŸÉ ÿ®ŸÜÿ≥ÿÆ ÿßŸÑÿ±ŸÖŸàÿ≤.',
        'admin_menu': 'üõ† *ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑ*',
        'add_user': '‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿπÿ∂Ÿà',
        'remove_user': '‚ûñ ÿ•ÿ≤ÿßŸÑÿ© ÿπÿ∂Ÿà',
        'set_limit': 'üìù ÿ™ÿπŸäŸäŸÜ ÿ≠ÿØ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ',
        'list_users': 'üë• ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿπÿ∂ÿßÿ°',
        'user_added': '‚úÖ ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπÿ∂Ÿà {user_id} ÿ®ŸÜÿ¨ÿßÿ≠ ŸÖÿπ ÿ≠ÿØ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä 5 ŸÜÿ≥ÿÆ/ŸäŸàŸÖ.',
        'user_removed': '‚úÖ ÿ™ŸÖÿ™ ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿπÿ∂Ÿà {user_id} ÿ®ŸÜÿ¨ÿßÿ≠.',
        'user_not_found': '‚ùå ÿßŸÑÿπÿ∂Ÿà {user_id} ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ.',
        'limit_updated': '‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≠ÿØ ÿßŸÑŸäŸàŸÖŸä ÿ•ŸÑŸâ {limit} ŸÑŸÑÿπÿ∂Ÿà {user_name} (ID: {user_id}).',
        'invalid_input': '‚ùå ÿ•ÿØÿÆÿßŸÑ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÇŸÖ ÿµÿ≠Ÿäÿ≠.',
        'user_info': 'üë§ *ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿπÿ∂Ÿà*\n\nüîπ ÿßŸÑÿßÿ≥ŸÖ: {user_name}\nüîπ ÿßŸÑÿ±ŸÇŸÖ: `{user_id}`\nüîπ ÿßŸÑÿ£Ÿäÿ®Ÿä: `{ip}`\nüîπ ÿßŸÑŸàŸÇÿ™: `{time}`\nüîπ ÿßŸÑÿ±ŸÖÿ≤: `{code}`',
        'current_limit': 'üî¢ *ÿ™ÿπŸäŸäŸÜ ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ*\n\nÿßŸÑÿπÿ∂Ÿà: {user_name} (ID: {user_id})\nÿßŸÑÿ≠ÿØ ÿßŸÑÿ≠ÿßŸÑŸä: {limit}\n\nÿßÿÆÿ™ÿ± ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°:',
        'increase': '‚ûï ÿ≤ŸäÿßÿØÿ©',
        'decrease': '‚ûñ ŸÜŸÇÿµÿßŸÜ',
        'send_user_id': 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:',
        'code_private_msg': 'üîê *ÿ±ŸÖÿ≤ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©*\n\nÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ: `{code}`\n\n‚ö†Ô∏è ÿµÿßŸÑÿ≠ ŸÑŸÖÿØÿ© 30 ÿ´ÿßŸÜŸäÿ© ŸÅŸÇÿ∑!',
        'limit_change_success': '‚úÖ ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ≠ÿØ ÿ®ŸÜÿ¨ÿßÿ≠! ÿßŸÑÿ≠ÿØ ÿßŸÑÿ¨ÿØŸäÿØ: {limit}'
    }
}

def get_user_ip():
    try:
        response = requests.get('https://api.ipify.org?format=json')
        if response.status_code == 200:
            return response.json().get('ip', 'Unknown')
    except:
        pass
    return 'Unknown'

def get_user_language(user_id):
    return user_language.get(user_id, 'en')

def generate_2fa_code():
    totp = pyotp.TOTP(TOTP_SECRET)
    return totp.now()

def send_2fa_code(context: CallbackContext):
    global last_code_sent_time
    
    code = generate_2fa_code()
    next_time = (datetime.now(gaza_tz) + timedelta(minutes=5)).strftime('%I:%M:%S %p')
    last_code_sent_time = datetime.now(gaza_tz)
    
    lang = 'en'
    
    keyboard = [
        [InlineKeyboardButton(texts[lang]['copy_button'], callback_data='generate_new_code')],
        [InlineKeyboardButton(texts[lang]['language_button'], callback_data='change_language')]
    ]

    context.bot.send_message(
        chat_id=GROUP_ID,
        text=texts[lang]['code_message'].format(next_time=next_time),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    update.message.reply_text(f"Hello! I'm the 2FA bot. Your ID: {user_id}")

def handle_copy(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    lang = get_user_language(user_id)
    
    # Generate new code in real-time
    code = generate_2fa_code()
    
    # Auto-add user with default 5 copies if not exists
    if user_id not in allowed_users:
        allowed_users[user_id] = {
            'limit': 5,
            'used': 0,
            'name': user_name
        }
    
    user_data = allowed_users[user_id]
    
    if user_data['used'] >= user_data['limit']:
        query.answer(
            text=texts[lang]['copy_limit_reached'].format(
                used=user_data['used'],
                limit=user_data['limit']
            ),
            show_alert=True
        )
        return
    
    # Send real-time code to private chat
    try:
        context.bot.send_message(
            chat_id=user_id,
            text=texts[lang]['code_private_msg'].format(code=code),
            parse_mode='Markdown'
        )
        user_data['used'] += 1
        query.answer(text=texts[lang]['copy_success'], show_alert=True)
    except Exception as e:
        query.answer(text="‚ùå Failed to send code. Please start a chat with the bot first.", show_alert=True)
        return
    
    # Log to admin
    ip_address = get_user_ip()
    now = datetime.now(gaza_tz).strftime('%Y-%m-%d %H:%M:%S')
    
    context.bot.send_message(
        chat_id=ADMIN_ID,
        text=texts[lang]['user_info'].format(
            user_name=user_name,
            user_id=user_id,
            ip=ip_address,
            time=now,
            code=code
        ),
        parse_mode='Markdown'
    )

def change_language(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    current_lang = get_user_language(user_id)
    new_lang = 'ar' if current_lang == 'en' else 'en'
    user_language[user_id] = new_lang
    
    code_message = query.message.text.split('\n')[0]
    next_time = (datetime.now(gaza_tz) + timedelta(minutes=5)).strftime('%I:%M:%S %p')
    
    keyboard = [
        [InlineKeyboardButton(texts[new_lang]['copy_button'], callback_data='generate_new_code')],
        [InlineKeyboardButton(texts[new_lang]['language_button'], callback_data='change_language')]
    ]
    
    query.edit_message_text(
        text=texts[new_lang]['code_message'].format(next_time=next_time),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    query.answer(text=f"Language changed to {new_lang.upper()}")

def admin_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return
    
    lang = get_user_language(user_id)
    keyboard = [
        [InlineKeyboardButton(texts[lang]['add_user'], callback_data='admin_add_user')],
        [InlineKeyboardButton(texts[lang]['remove_user'], callback_data='admin_remove_user')],
        [InlineKeyboardButton(texts[lang]['set_limit'], callback_data='admin_set_limit')],
        [InlineKeyboardButton(texts[lang]['list_users'], callback_data='admin_list_users')]
    ]
    
    update.message.reply_text(
        text=texts[lang]['admin_menu'],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

def admin_actions(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        return

    lang = get_user_language(user_id)
    action = query.data

    if action == 'admin_add_user':
        pending_actions[user_id] = {'action': 'add_user'}
        context.bot.send_message(
            chat_id=user_id,
            text=texts[lang]['send_user_id']
        )
    elif action == 'admin_remove_user':
        pending_actions[user_id] = {'action': 'remove_user'}
        context.bot.send_message(
            chat_id=user_id,
            text=texts[lang]['send_user_id']
        )
    elif action == 'admin_set_limit':
        pending_actions[user_id] = {'action': 'set_limit'}
        context.bot.send_message(
            chat_id=user_id,
            text=texts[lang]['send_user_id']
        )
    elif action == 'admin_list_users':
        list_users(update, context)

def list_users(update: Update, context: CallbackContext):
    user_id = update.effective_user.id or update.callback_query.from_user.id
    if user_id != ADMIN_ID:
        return
    
    lang = get_user_language(user_id)
    users_list = []
    
    for uid, user_data in allowed_users.items():
        users_list.append(f"üîπ {user_data['name']} (ID: {uid}) - {user_data['used']}/{user_data['limit']} copies today")
    
    if not users_list:
        users_list.append("No users available")
    
    if update.callback_query:
        update.callback_query.answer()
    
    context.bot.send_message(
        chat_id=ADMIN_ID,
        text="üë• *User List*\n\n" + "\n".join(users_list),
        parse_mode='Markdown'
    )

def handle_admin_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID or user_id not in pending_actions:
        return
    
    lang = get_user_language(user_id)
    text = update.message.text
    action = pending_actions[user_id]['action']
    
    try:
        target_user = int(text)
        
        if action == 'add_user':
            if target_user not in allowed_users:
                allowed_users[target_user] = {
                    'limit': 5,
                    'used': 0,
                    'name': f"User {target_user}"
                }
                update.message.reply_text(
                    texts[lang]['user_added'].format(user_id=target_user)
                )
            else:
                update.message.reply_text(f"User {target_user} already exists")
        
        elif action == 'remove_user':
            if target_user in allowed_users:
                del allowed_users[target_user]
                update.message.reply_text(
                    texts[lang]['user_removed'].format(user_id=target_user)
                )
            else:
                update.message.reply_text(
                    texts[lang]['user_not_found'].format(user_id=target_user)
                )
        
        elif action == 'set_limit':
            if target_user in allowed_users:
                user_data = allowed_users[target_user]
                keyboard = [
                    [
                        InlineKeyboardButton(texts[lang]['increase'], callback_data=f'limit_inc_{target_user}'),
                        InlineKeyboardButton(texts[lang]['decrease'], callback_data=f'limit_dec_{target_user}')
                    ]
                ]
                
                update.message.reply_text(
                    texts[lang]['current_limit'].format(
                        user_name=user_data['name'],
                        user_id=target_user,
                        limit=user_data['limit']
                    ),
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            else:
                update.message.reply_text(
                    texts[lang]['user_not_found'].format(user_id=target_user)
                )
    
    except ValueError:
        update.message.reply_text(texts[lang]['invalid_input'])
    
    del pending_actions[user_id]

def handle_limit_actions(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        return
    
    lang = get_user_language(user_id)
    data = query.data.split('_')
    action = data[1]
    target_user = int(data[2])
    
    if target_user not in allowed_users:
        query.answer(text=texts[lang]['user_not_found'].format(user_id=target_user), show_alert=True)
        return
    
    user_data = allowed_users[target_user]
    
    if action == 'inc':
        user_data['limit'] += 1
    elif action == 'dec':
        if user_data['limit'] > 1:
            user_data['limit'] -= 1
        else:
            query.answer(text="Limit cannot be less than 1", show_alert=True)
            return
    
    query.edit_message_text(
        text=texts[lang]['limit_updated'].format(
            limit=user_data['limit'],
            user_name=user_data['name'],
            user_id=target_user
        ),
        parse_mode='Markdown'
    )
    query.answer(text=texts[lang]['limit_change_success'].format(limit=user_data['limit']), show_alert=True)

def reset_daily_limits(context: CallbackContext):
    for user_data in allowed_users.values():
        user_data['used'] = 0
    logger.info("Daily copy limits have been reset")

def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin_command))
    dp.add_handler(CallbackQueryHandler(handle_copy, pattern='^generate_new_code$'))
    dp.add_handler(CallbackQueryHandler(change_language, pattern='^change_language$'))
    dp.add_handler(CallbackQueryHandler(admin_actions, pattern='^admin_'))
    dp.add_handler(CallbackQueryHandler(handle_limit_actions, pattern='^limit_'))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_admin_message))
    dp.add_error_handler(error_handler)
    
    jq = updater.job_queue
    jq.run_repeating(send_2fa_code, interval=300, first=0)
    jq.run_daily(reset_daily_limits, time=datetime.strptime("00:00", "%H:%M").time())
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
